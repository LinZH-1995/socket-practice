<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <script src="https://kit.fontawesome.com/2a9bb43fc7.js" crossorigin="anonymous"></script>
  <title>Socket.IO chat</title>
</head>

<body>

  <header>
    <nav class="navbar navbar-expand-lg fixed-top navbar-dark bg-dark">
      <div class="container-fluid">
        <a class="navbar-brand fs-3 fw-bold ms-5" href="/">首頁</a>

        <div class="d-flex me-2" role="search">
          <div class="text-white me-3 my-auto">
            {{#if isAuthenticated}}{{user.name}}{{else}}使用者{{/if}} 您好
          </div>
          {{#if isAuthenticated}}
          <a id="logout-button" href="/logout" class="btn btn-sm btn-outline-danger my-auto my-sm-0 logout-button"
            data-user-id="{{user._id}}" onclick="logout()">Logout</a>
          {{/if}}
        </div>
      </div>
    </nav>
  </header>

  <main class="mt-5">
    {{{body}}}
  </main>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
    crossorigin="anonymous"></script>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io()

    function logout() {
      // 對server端發送'logout'事件，傳入使用者ID
      socket.emit('logout')
    }

    function postMessage(element) {
      const msg = element.value.trim().split(/\n/g) //以換行符號分割訊息， ['msg', 'msg']
      const roomId = element.dataset.roomId // 對哪個房間發送消息，除public外，等同訊息receiverId
      if (roomId === 'public') {
        // 告訴server端，客戶端打算新增 public 訊息
        socket.emit('post public message', { msg })
      } else {
        // 告訴server端，客戶端打算新增 private 訊息
        socket.emit('post private message', { msg, receiverId: roomId })
      }
      element.value = '' // 清空訊息
    }

    // 發送按鈕使用這個fn
    function submitMessageBtn(e) {
      const ele = document.querySelector('#inputArea') // <textarea id="#inputArea">...</textarea>
      postMessage(ele)
    }

    // enter按鈕使用這個fn
    function submitMessage(e) {
      // 如果按的是enter並且沒加shift = 送出訊息
      if (e.key === 'Enter' && !e.shiftKey) {
        postMessage(e.target)
      }
    }

    function cancelNewLine(e) {
      // 如果按的是enter並且沒加shift = 使用者想送出訊息
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault()
      }
      // 如果是enter + shift = 使用者想讓輸入的訊息換行
    }

    function addNotifyElement(messageType, senderId, unreadMsg) {
      // 公共訊息
      if (messageType === 'public') {
        // 使用者畫面不同，提示使用者有新訊息 (已有提示則不新增)
        const notifyElement = document.querySelector('.li-public > a > div')
        if (!notifyElement) {
          const a = document.querySelector(`.li-public > a`)
          const div = document.createElement('div')
          div.classList.add('unread-msg-count', 'my-auto')
          div.innerHTML = `<i class="fa-solid fa-circle-exclamation"></i>`
          a.appendChild(div)

          // 記錄使用者有public未讀訊息，避免畫面更新後消失
          socket.emit('add user public message notify')
        }
        return
      }

      // 私人訊息
      const notifyElement = document.querySelector(`.li-${senderId} > a > div`)
      // 已有通知element
      if (notifyElement) {
        const num = notifyElement.textContent // string num
        notifyElement.textContent = Number(num) + 1
      } else {
        const a = document.querySelector(`.li-${senderId} > a`)
        const div = document.createElement('div')
        div.classList.add('unread-msg-count', 'my-auto')
        div.textContent = unreadMsg ?? 1
        a.appendChild(div)
      }
    }

    function addSendMessagesElement(chatMsgDOM, message, roomId) {
      const msg = message.content.join('<br/>')
      const div = document.createElement('div')
      div.classList.add('send-messages', 'd-flex', 'flex-column', 'align-items-end', 'mb-3')
      if (roomId === 'public') {
        div.innerHTML = `<div class="send-message">${msg}</div>
        <span class="time text-muted">${message.createdAt}</span>`
      } else {
        div.innerHTML = `<div class="send-message">${msg}</div>
        <div class="d-flex message-under-zone unread">
          <span class="time text-muted">${message.createdAt}</span>
        </div>`
      }
      chatMsgDOM.appendChild(div)
    }

    function addReceiveMessagesElement(chatMsgDOM, message) {
      const msg = message.content.join('<br/>')
      const div = document.createElement('div')
      div.classList.add('receive-messages', 'd-flex', 'flex-column', 'align-items-start', 'mb-3')
      div.innerHTML = `<div class="receive-message">${msg}</div>
          <div class="time text-muted"><span>${message.createdAt}</span></div>`
      chatMsgDOM.appendChild(div)
    }

    function refreshUnreadMessages(e) {
      const senderId = e.target.dataset.userId
      const receiverId = document.querySelector('#logout-button').dataset.userId
      // 通知使用者即時更新畫面訊息成已讀
      socket.emit('refresh unread messages', { senderId, receiverId })
    }

    function addFriend(e) {
      const friendId = e.target.dataset.userId
      socket.emit('add friend', { friendId })
    }

    // 新增好友後，移除按鈕
    socket.on('remove add friend button', function ({ senderId, receiverId }) {
      const currentUserId = document.querySelector('#logout-button').dataset.userId
      const li = currentUserId === senderId ? document.querySelector(`.li-${receiverId}`) : document.querySelector(`.li-${senderId}`)
      li.lastElementChild.remove()
    })

    // 客戶端監聽'add onlineUser'事件
    socket.on('add onlineUser', function ({ user, messages }) {
      const currentUserId = document.querySelector('#logout-button').dataset.userId
      const currentRoomId = document.querySelector('#inputArea').dataset.roomId

      // 上線使用者的好友名單中是否有我
      const isFriend = user.friends.some(friend => friend.toString() === currentUserId)

      // 確認不是上線的使用者收到此訊息，避免重複(上線使用者會自動取得最新畫面不必再次更新)
      if (currentUserId !== user._id && currentRoomId === 'public') {
        // DOM操作更新畫面
        const ul = document.querySelector('.online-users-list')
        const li = document.createElement('li')
        li.classList.add('online-user', `li-${user._id}`)

        if (isFriend) {
          li.innerHTML = `<span>${user.name}</span>`
        } else {
          li.innerHTML = `
          <span>${user.name}</span>
          <button class="add-friend-button btn btn-sm btn-secondary rounded-circle" onclick="addFriend(event)">
            <i class="fa-solid fa-plus" data-user-id="${user._id}"></i>
          </button>`
        }
        ul.appendChild(li)

        // 取得新上線使用者傳給當前客戶端的未讀訊息數
        //const unreadMsg = messages.filter(msg => msg.receiver === currentUserId && msg.unread === true).length
        //if (unreadMsg !== 0) addNotifyElement('private', user._id, unreadMsg)
      }
    })

    // 客戶端監聽'remove onlineUser'事件
    socket.on('remove onlineUser', function (logoutUserId) {
      //const currentRoomId = document.querySelector('#inputArea').dataset.roomId
      const item = document.querySelector(`.li-${logoutUserId}`) // 選取li元素
      item.remove() // 刪除元素

      // 客戶端當前所在房間與離線使用者相同
      // 使用者離線後，將客戶端重新導向
      //if (currentRoomId === logoutUserId) window.location.href = '/home'
    })

    // 客戶端收到新增 public 訊息事件
    socket.on('add public message', function ({ message }) {
      const senderId = message.sender // 訊息發送者
      const chatMsgDOM = document.querySelector('#msgs')
      // 當前客戶端是誰
      const currentUserId = document.querySelector('#logout-button').dataset.userId
      // 當前使用者所在房間
      const currentRoomId = document.querySelector('#inputArea').dataset.roomId

      // 確認使用者畫面是否跟收到的訊息發送房間一樣，一樣才更新畫面
      if (currentRoomId === 'public') {
        if (senderId === currentUserId) {
          // 本人發出的訊息
          addSendMessagesElement(chatMsgDOM, message, 'public')
        } else {
          // 非本人發出的訊息
          addReceiveMessagesElement(chatMsgDOM, message)
        }
        return
      }

      addNotifyElement('public', null, null)
    })

    // 客戶端收到新增 private 訊息事件
    socket.on('add private message', function ({ message, senderId, receiverId }) {
      const chatMsgDOM = document.querySelector('#msgs')
      // 當前客戶端是誰
      const currentUserId = document.querySelector('#logout-button').dataset.userId
      // 客戶端當前所在房間頁面
      const currentRoomId = document.querySelector('#inputArea').dataset.roomId

      // 發送者是當前客戶端，並且確認使用者是否還在此房間頁面
      if (senderId === currentUserId && receiverId === currentRoomId) {
        addSendMessagesElement(chatMsgDOM, message, currentRoomId)
      } else if (receiverId === currentUserId) {
        // 當前客戶端為接收方，確認使用者是否還在此房間頁面 
        if (senderId === currentRoomId) {
          // 客戶端還在此房間，更新畫面訊息，通知發送者訊息已讀
          addReceiveMessagesElement(chatMsgDOM, message)
          socket.emit('refresh unread messages immediately', { msgId: message._id, senderId, receiverId })
        } else {
          addNotifyElement('private', senderId, null)
        }
      }
    })

    socket.on('refresh unread messages', function ({ senderId, receiverId }) {
      // 客戶端當前所在房間頁面
      const currentRoomId = document.querySelector('#inputArea').dataset.roomId

      // 訊息接收者通知客戶端訊息已讀，如不在當前房間，不用額外操作
      if (receiverId === currentRoomId) {
        // 選取所有的<div class="message-under-zone unread">...</div>
        const zone = document.querySelectorAll('.message-under-zone.unread')
        zone.forEach(element => {
          const span = document.createElement('span')
          span.className = 'readed-msg'
          span.textContent = '已讀' // <span class="readed-msg">已讀</span>
          element.classList.remove('unread') //<div class="message-under-zone">...</div>
          element.prepend(span)
        })
      }
    })
  </script>
</body>

</html>