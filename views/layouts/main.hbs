<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <script src="https://kit.fontawesome.com/2a9bb43fc7.js" crossorigin="anonymous"></script>
  <title>Socket.IO chat</title>
</head>

<body>

  <header>
    <nav class="navbar navbar-expand-lg fixed-top navbar-dark bg-dark">
      <div class="container-fluid">
        <a class="navbar-brand fs-3 fw-bold ms-5" href="/">首頁</a>

        <div class="d-flex me-2" role="search">
          <div class="text-white me-3 my-auto">
            {{#if isAuthenticated}}{{user.name}}{{else}}使用者{{/if}} 您好
          </div>
          {{#if isAuthenticated}}
          <a id="logout-button" href="/logout" class="btn btn-sm btn-outline-danger my-auto my-sm-0 logout-button"
            data-user-id="{{user._id}}">Logout</a>
          {{/if}}
        </div>
      </div>
    </nav>
  </header>

  <main class="mt-5">
    {{{body}}}
  </main>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
    crossorigin="anonymous"></script>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io()

    // 綁定'click'事件給登出按鈕，當使用者按下登出時做甚麼
    const logoutButton = document.querySelector('.logout-button')
    if (logoutButton) {
      logoutButton.addEventListener('click', function (e) {
        const userId = e.target.dataset.userId
        // 對server端發送'logout'事件，傳入使用者ID
        socket.emit('logout', userId)
      })
    }

    // 發送按鈕使用這個fn
    function submitMessageBtn(e) {
      const ele = document.querySelector('#inputArea') // <textarea id="#inputArea">...</textarea>
      const msg = ele.value.trim().split(/\n/g) //以換行符號分割訊息， ['msg', 'msg']
      const senderId = ele.dataset.senderId // 發送者是誰
      const roomId = ele.dataset.roomId // 對哪個房間發送消息，除public外，等同訊息receiverId
      socket.emit('post message', { msg, roomId, senderId }) // 告訴server端，客戶端打算新增訊息
      ele.value = '' // 清空訊息
    }

    // enter按鈕使用這個fn
    function submitMessage(e) {
      // 如果按的是enter並且沒加shift = 送出訊息
      if (e.key === 'Enter' && !e.shiftKey) {
        const msg = e.target.value.trim().split(/\n/g)
        const senderId = e.target.dataset.senderId // 發送者是誰
        const roomId = e.target.dataset.roomId // 對哪個房間發送消息，除public外，等同訊息receiverId
        socket.emit('post message', { msg, roomId, senderId }) // 告訴server端，客戶端打算新增訊息
        e.target.value = '' // 清空訊息
      }
    }

    function cancelNewLine(e) {
      // 如果按的是enter並且沒加shift = 使用者想送出訊息
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault()
      }
      // 如果是enter + shift = 使用者想讓輸入的訊息換行
    }

    // 客戶端監聽'add onlineUser'事件
    socket.on('add onlineUser', function (onlineUser) {
      const currentUserId = document.querySelector('#logout-button').dataset.userId

      // 確認不是上線的使用者收到此訊息，避免重複(上線使用者會自動取得最新畫面不必再次更新)
      if (currentUserId !== onlineUser._id) {
        // DOM操作更新畫面
        const ul = document.querySelector('.nav-pills')
        const li = document.createElement('li')
        li.classList.add('nav-item', 'mb-2', `li${onlineUser._id}`)
        li.innerHTML = `<a class="nav-link" href="/messages/t/${onlineUser._id}">${onlineUser.name}</a>`
        ul.appendChild(li)
      }
    })

    // 客戶端監聽'remove onlineUser'事件
    socket.on('remove onlineUser', function (logoutUserId) {
      const item = document.querySelector(`.li${logoutUserId}`) // 選取li元素
      item.remove() // 刪除元素
    })

    // 客戶端收到新增 public 訊息事件
    socket.on('add public message', function ({ message, senderId, roomId }) {
      const chatMsgDOM = document.querySelector('#msgs')

      // 當前客戶端是誰
      const currentUserId = document.querySelector('#logout-button').dataset.userId

      // 確認使用者畫面是否跟收到的訊息發送房間一樣，一樣才更新畫面
      if (roomId === 'public') {
        if (senderId === currentUserId) {
          // 本人發出的訊息
          const msg = message.content.join('<br/>')
          const div = document.createElement('div')
          div.classList.add('send-messages', 'd-flex', 'flex-column', 'align-items-end', 'mb-3')
          div.innerHTML = `<div class="send-message">${msg}</div>
          <div class="time text-muted"><span>${message.createdAt}</span></div>`
          chatMsgDOM.appendChild(div)
        } else {
          // 非本人發出的訊息
          const msg = message.content.join('<br/>')
          const div = document.createElement('div')
          div.classList.add('receive-messages', 'd-flex', 'flex-column', 'align-items-start', 'mb-3')
          div.innerHTML = `<div class="receive-message">${msg}</div>
          <div class="time text-muted"><span>${message.createdAt}</span></div>`
          chatMsgDOM.appendChild(div)
        }
      }
    })

    // 客戶端收到新增 private 訊息事件
    socket.on('add private message', function ({ message, senderId, roomId }) {
      const chatMsgDOM = document.querySelector('#msgs')
      // 當前客戶端是誰
      const currentUserId = document.querySelector('#logout-button').dataset.userId
      // 當前所在房間頁面
      const currentRoomId = document.querySelector('#inputArea').dataset.roomId
console.log('test private msg: ', message, senderId, roomId, currentUserId, currentRoomId)

      // 發送者是當前客戶端
      if (senderId === currentUserId) {
        // 確認使用者是否還在此房間頁面
        if (roomId === currentRoomId) {
          const msg = message.content.join('<br/>')
          const div = document.createElement('div')
          div.classList.add('send-messages', 'd-flex', 'flex-column', 'align-items-end', 'mb-3')
          div.innerHTML = `<div class="send-message">${msg}</div>
          <div class="time text-muted"><span>${message.createdAt}</span></div>`
          chatMsgDOM.appendChild(div)
        }
      } else {
        // 當前客戶端為接收方
        // 確認使用者是否還在此房間頁面
        if (senderId === currentRoomId) {
          const msg = message.content.join('<br/>')
          const div = document.createElement('div')
          div.classList.add('receive-messages', 'd-flex', 'flex-column', 'align-items-start', 'mb-3')
          div.innerHTML = `<div class="receive-message">${msg}</div>
          <div class="time text-muted"><span>${message.createdAt}</span></div>`
          chatMsgDOM.appendChild(div)
        }
      }
    })
  </script>
</body>

</html>